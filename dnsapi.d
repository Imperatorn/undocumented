@nogc nothrow:
extern(C): __gshared:
import core.stdc.stddef: wchar_t;
int dynamic_initializer_for__g_srwDnsRpcBindingLock__();
int dynamic_initializer_for__g_csNetworkStatus__();
int dynamic_initializer_for__g_strNetworkStatusDialUpConnectionName__();
void cleanupForExit();
void ReleaseDnsGlobalRpcBindingHandle();
void AdaptiveTimeout_Cleanup();
void AdaptiveTimeout_ClearInterfaceSpecificConfiguration();
void Coalesce_Cleanup();
void CleanupNetworkInfo();
void NetInfo_MarkDirty();
long DecodeWireFormatQueryName(_BYTE* a1, long a2, _WORD* a3, uint* a4, uint a5);
void NetInfo_CleanOnReentry(long a1, long a2, int a3);
long DnsFlushResolverCacheEntry_W(const(wchar_t)* a1);
void Query_MDNSDualTimerCallback(long a1, long a2);
long Query_MDNSDualComplete(long a1, int a2);
void Query_MDNSDualCompleteCallback(long a1, long a2, long a3);
void FreeSuffixAndPrefixPolicyTable(long a1);
long HistogramCalculatePercentile();
long Query_CreateMDNSContextForQueryBlob(long a1);
long ThreadPool_CreateWork(PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_WORK* a3);
long Query_Multicast(long a1, int a2, _DWORD* a3);
long netinfo_StrikeOutUnreachableDnsServers(long a1, char* a2);
void netinfo_StrikeOutDefaultDnsServers(long a1, int a2);
void NetInfo_ResetServerPriorities(long a1, int a2);
long DnsAddr_IsIp6DefaultDns(long a1);
long LocalIp_IsAddrLocal(uint* a1, _DWORD* a2);
void Reg_Init();
long DnsAddrArray_GetFamilyCount(long a1, int a2);
long Query_MDNS(long a1, _DWORD* a2);
void Recv_TimerCallback(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
long Recv_UdpCallbackCompletion(long a1);
long Query_MDNSComplete(long a1, void** a2, int a3, int a4);
long AdapterInfo_CreateMulticastAddrs(long a1, int a2, _QWORD* a3);
long NetInfo_CreateLocalAddrArray(long a1, long a2, long a3, int a4, int a5);
long netinfo_ReadLocalAddrs(long a1, long a2, long a3, long a4, char a5, int a6, int a7);
long DnsAddrArray_AddAddr(long a1, _WORD* a2, int a3, int a4);
long DnsAddr_BuildMcast(void* Dst, int a2);
void Send_CancelQuery(long a1);
long Query_SendDualAddressQuery(uint* lpMem, _DWORD* a2);
long SetDualAddrFirstResponseQueryFlags(long a1, long a2, char a3);
void ThreadPool_WaitForTimer(PTP_TIMER pti, int a2);
void DeRefMDNSContext(void* Dst);
long DnsAddrArray_ContainsAddr(long a1, _WORD* a2, int a3);
void DeRefDnsMessage(LPVOID lpMem);
const(wchar_t)* GetNextDomainNameToAppend(long a1, uint a2, _DWORD* a3, _DWORD* a4);
long NetInfo_Clean(long a1, int a2);
void Recv_IoCompletionCallback(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io);
long Send_AndRecvUdpComplete(long a1);
long Recv_ProcessUdpResponse(long a1, _DWORD* a2, _DWORD* a3);
long Dns_SkipPacketName(uint* a1, uint a2);
long DnsAddr_IsEqual(_WORD* a1, _WORD* a2, int a3);
long resetServerAfterRecv(long a1, _WORD* a2, int a3, int a4);
void AdaptiveTimeout_RecordElapsedTime(uint a1);
void Recv_UpdateControlInfo(long a1, long a2, long a3);
int AdapterInfo_Free(long a1);
void DnsPrint_NetworkInfo(long a1, long a2);
void DeRefSendBlob(LPVOID lpMem);
void Dns_FreeMsgBuf(LPVOID lpMem);
const(wchar_t)* SearchList_GetNextName(long a1, long a2, int a3, long a4);
void DnsFree(void* Dst, int a2);
void ThreadPool_DeleteTimer(PTP_TIMER pti);
void Threadpool_SetTimer(PTP_TIMER pti, uint a2);
long Dns_MapRcodeToStatus(uint a1);
long DnsAddr_BuildFromIp6(void* Dst, long a2, int a3, uint a4);
long DnsAddr_BuildFromIp4(void* Dst, long a2, uint a3);
void DnsTraceQueryTimeout(long a1, long a2);
long AddRefSendBlob(void* a1);
long serverPriorityChange(long a1, long a2, uint* a3);
long DnsAddr_IsLoopback(uint* a1, int a2);
long IP6_IS_ADDR_LOOPBACK(_DWORD* a1);
void ThreadPool_CloseWork(long a1);
void AddMDnsMQueryEntry(_QWORD* a1, _QWORD* a2, long a3);
long CopyMdnsRpcQueryHandleToQueryHandle(long a1, long a2);
long DnsStartMulticastQuery(_MDNS_QUERY_REQUEST*, _MDNS_QUERY_HANDLE*); // idb
long RemoveMDnsMQueryEntry(const(_WNF_STATE_NAME)* a1);
long Initialize(WnfParams* __hidden, _MDNS_QUERY_REQUEST*, _MDNS_QUERY_HANDLE*); // idb
long CopyMdnsQueryHandleToRpcQueryHandle(long a1, long a2);
char* CopyMdnsQueryRequest(long a1, long a2);
char* CopyMdnsQueryRequestToRpcQueryRequest(long a1, long a2);
long StringCbCopyW(uint*, ulong, const(uint)*); // idb
long StringCbLengthW(const(uint)* a1, long a2, uint* a3);
long DnsStopMulticastQuery(long a1);
long DnsStartMulticastQueryRpc(_MDNS_RPC_QUERY_REQUEST*, _MDNS_RPC_QUERY_HANDLE*, void**); // idb
long DnsStopMulticastQueryRpc(_MDNS_RPC_QUERY_HANDLE*, void**); // idb
long createQueryBlob(long a1, int a2);
long Query_BroadcastStart(long a1, _DWORD* a2);
long Query_IsNetBiosRequired(long a1);
long StaticCallback(long a1, long a2, long a3, uint** a4);
long DnsGetMulticastDataRPC(_MDNS_RPC_QUERY_HANDLE* a1, _DnsCachedRecords** a2);
long Query_CreateMDNSBlob(long a1);
long DnsGetProxyInformation(PCWSTR AddressString, long a2, __m128i* a3);
long DnsGetProxyInformationRpc(const(wchar_t)* a1, long a2, long a3, long a4, long a5);
void LockExclusive(AutoSrw* __hidden); // idb
long CreateInstance(void*, const(uint)*, void*, void*, int, CWxRpcBinding**); // idb
long Initialize(CWxRpcBinding* this_, void* a2, const(uint)* a3, void* a4);
long DnsGetAdaptersInfo(long a1, long a2, int a3, long a4, long a5);
long ReleaseDnsRpcBindingHandle(long a1);
long Query_IsPreferedNetworkQuery(long a1, long a2, int a3);
long DnsQuery_W(const(WCHAR)* a1, uint a2, uint a3, long a4, long* a5, _QWORD* a6);
long Query_Shim(uint a1, const(WCHAR)* a2, uint a3, long a4, long a5, long a6, long* a7, _QWORD* a8);
void Trace_LogQueryDuration();
ubyte Query_IsSuccessResponse(int a1);
void DeRefNetworkQueryBlob(LPVOID lpMem);
bool tlgKeywordOn(long a1);
long Rpc_ResolverQuery(void* _RCX, const(wchar_t)* a2, uint a3, _QWORD* a4, int a5, int a6, int a7, int a8, LPCWSTR lpModuleName, int a10, long a11, long a12, long a13);
void RpcRecalculateDataLength(long a1);
long SyncResolverQueryRpc(long a1, uint a2, int a3, int a4, long a5, CLIENT_CALL_RETURN a6, long a7, LARGE_INTEGER a8, _DWORD* a9);
long GetDnsRpcBindingHandleRef(CWxRpcBinding** a1);
long Query_Main(LPVOID lpMem); // idb
long NetworkQuery_IsProtocolOrderChangeRequired(long a1);
long validateDnsNamePrivate(_BYTE* a1, int a2, long a3, long a4, _DWORD* a5, int* a6);
void NetworkQuery_CacheEffectiveQueryResults(_QWORD* a1, int a2);
void NetworkQuery_ProcessEffectiveQuery(long a1);
long Query_BroadcastComplete(long a1, int a2);
void DeRefQueryBlobEx(LPVOID lpMem, long a2, int a3, int a4);
long Query_ProcessLastQuery(long a1, long a2);
long Query_Start(long a1, long a2);
long DnsQueryEx(int* a1, long a2, long a3);
long Reg_ReadGlobalsEx(QWORD); // weak
long Reg_GetDword(LPBYTE a1, HKEY a2, uint a3, uint a4, LPBYTE a5);
long Dns_Ip6LiteralNameToAddress(long a1, const(wchar_t)* a2);
long local_GetLocalAddressRecord(long a1, uint a2, const(wchar_t)* a3, long a4, int a5);
long Dns_NameCompare_W(PCNZWCH lpString1, PCNZWCH lpString2); // idb
long Query_ProcessResult(LPVOID lpMem); // idb
long Query_ProcessQueryStatus(long a1);
long Query_NextName(const(wchar_t)** lpMem, long a2);
long GetNextQueryName(long a1, _DWORD* a2);
long FixNetworkInfoForConnectionPolicy(uint* a1, long a2);
void idnQuerySwitches(long a1);
long idnQueryDepunify(long a1, _QWORD* a2);
long Query_SingleNameDualAddr(LPVOID lpMem); // idb
long Query_SingleNamePrivate(LPVOID lpMem, uint a2, int a3, int a4);
long Query_Wire(LPVOID lpMem, uint a2, int a3, int a4);
char* Dns_BuildPacket(long a1, int a2, long a3, u_short a4, long a5, int a6, uint a7);
long Dns_WriteDottedNameToPacket(uint* a1, uint a2, WCHAR* a3, WCHAR* a4, short a5, int a6);
long idnQueryWireFormat(long a1);
long Coalesce_Lookup(const(wchar_t)* a1, uint a2, int a3, int a4, long a5, long* a6);
long Send_AndRecv(_QWORD* a1, long a2);
long Dns_InitializeMsgBuf(long a1);
long Send_AndRecvUdpWithParam(_QWORD* a1, long a2);
long Recv_Udp(long a1);
long sendUdpToNextDnsServers(long a1, long a2, uint a3, int a4, int* a5);
long Socket_ProcessReturnStatus(LPVOID lpMem, int a2);
long Socket_PrepareAsyncMessage(PVOID pv, HANDLE fl, uint a3, long a4, _DWORD* a5);
long AdaptiveTimeout_GetInterfaceSpecificTimeouts(PCWSTR SourceString, void** a2);
long DnsConnectionGetProxyInfoForHostUrl(uint*, uint*, uint, uint, _DNS_CONNECTION_PROXY_INFO_EX*); // idb
long WX_WIN32_FROM_HR(long a1);
long WxConnectionGetProxyInfo(const(wchar_t)* a1, int a2, long a3);
long Dns_ExtractRecordsFromMessage(long a1, int a2, _QWORD* a3);
long Send_MessagePrivateEx(long a1, long a2, int a3, u_long a4);
long Socket_CreateMessageSocket(long a1);
void* Dns_FreeParsedMessageFields(void* Dst);
void** Ptr_RecordRead(long a1, int a2, long a3, uint a4, uint a5);
uint Dns_ReadPacketName(_BYTE* a1, _WORD* a2, uint* a3, _DWORD* a4, uint a5, long a6, uint a7);
long Dns_StringCopy(void* Dst, uint* a2, const(WCHAR)* a3, int a4, int a5, int a6);
long Dns_GetBufferLengthForStringCopy(LPCWSTR lpWideCharStr, long cchWideChar, int a3, int a4);
void* Dns_StringCopyAllocate(LPCWSTR lpWideCharStr, long cchWideChar, int a3, int a4);
void Dns_RecordFree(long a1);
long Send_AndRecvComplete(long a1, int a2, long a3);
void Dns_RecordListFree(long a1);
void DnsConnectionFreeProxyInfoEx(long a1);
long FreeProxyInfo(long a1);
long GetBestInterfaceIndex(uint*); // idb
long Coalesce_Complete(long a1, long a2, uint a3);
long Query_ProcessResponse(LPVOID lpMem, LPVOID a2, uint a3);
long Query_ProcessDualAddressResults(long a1);
LPvoid Dns_AllocZero(size_t Size);
void FreeIpAdapterInfoInternal(LPVOID lpMem);
long NetInfo_Build(int a1, _DWORD* a2);
void NetInfo_Free(LPVOID lpMem);
void DnsApiFree(LPVOID lpMem);
int SearchList_Free(LPVOID lpMem);
void DnsFreeInterfaceSettings(_QWORD* a1);
long IpHelp_ReadAddrsFromList(long a1, int a2, int a3, long a4, uint** a5);
void* FamilyInfo_GetForFamily(int a1);
void* Dns_CreateStringCopy_W(void* Src);
long netinfo_CheckAddrsForAddrConfig(int a1, long a2, long a3);
char AddDnsGlobalsToAdapter(long a1);
long OpenAdapterDhcpPersistedKey(void* a1, const(WCHAR)* a2);
long Reg_InitQueryTimeouts(); // weak
long AddDnsAndDhcpConfiguration(long a1, long a2);
long AddDnsConfiguration(long a1, long a2, long a3);
long AddDnsServerAddressesToAdapter(void* a1, long a2, char a3, _BYTE* a4);
int GetDnsServersString(void* a1, long a2, wchar_t** a3, _BYTE* a4);
long DnsGetInterfaceSettingsHelper(long a1, long a2);
HRESULT StringCchPrintfExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPWSTR* ppszDestEnd, size_t* pcchRemaining, DWORD dwFlags, STRSAFE_LPCWSTR pszFormat, ...);
long AddStaticDnsSearchListToAdapter(void* a1, long a2);
long Reg_CloseSession(HKEY* a1);
char IsDhcpRACoexistenceEnabled(long a1);
long AddDhcpv6ConfigurationArray(long a1, long a2, uint a3);
long AddRADnsSearchListToAdapter(long a1, long a2);
long GetRADnsSettings(long a1, uint* a2);
long SearchList_AddName(long a1, const(wchar_t)* a2, int a3, int a4);
long SearchList_ContainsName(long a1, const(wchar_t)* a2, int a3);
long SearchList_BuildFromAdapter(long a1, long a2);
long GetDhcpDomainSearchListString(long a1, long a2, _QWORD* a3);
long AddDHCPDomainSearchListToAdapter(long a1, long a2);
void Reg_FreeQueryTimeouts();
long privateRegReadDwordValue(HKEY a1, const(WCHAR)* a2, BYTE* a3);
long AddRADnsServerAddressesToAdapter(uint* a1, long a2, long a3, long a4);
long OpenRegistryPaths();
long DnsApiInit();
long InitNetworkInfo();
DWORD TimedLock_Initialize();
long startInit();
long Reg_ReadAdapterInfo(PCWSTR SourceString, long a2, long a3);
ubyte Dns_StringToGuid(PCWSTR SourceString, GUID* Guid);
long Reg_ReadAdapterInfoEx(const(WCHAR)* a1, void* a2, long a3, long a4, long a5);
long AddDhcpv6ConfigurationHelper(long a1, long a2, long a3, long a4);
long AdapterInfo_UpdateDnsInterfaceConfig(long a1);
long AddDhcpConfiguration(uint a1, long a2);
// long __usercall SearchList_BuildFromRegistry@<rax>(long a1@<rdx>, long a2@<rcx>, long a3@<r12>, long a4@<r13>, long a5@<r14>, long a6@<r15>);
long AdapterInfo_GetNetworkAdapterList(long a1, long a2);
_QWORD* NetworkAdapter_CreateNode();
long* NetworkAdapter_FindNetwork(_QWORD *a1, long a2);
long NetInfo_CreatePerNetworkNetinfo(long a1, long a2);
long AdapterInfo_Copy(void* Dst, long a2);
long* NetInfo_Copy(long a1);
long* NetInfo_CopyNode(long a1);
long AdapterInfo_Create(void* Dst, void* Src, void* a3, _WORD* a4, long Srca, void* a6, void* a7, void* a8, void* a9, uint* a10, void* a11, void* a12);
ubyte AdapterInfo_IsDnsIgnored(long a1);
long NetInfo_CopyNonAdapterInfo(long a1, int a2, long a3);
long* SearchList_Copy(long a1);
long* NetInfo_Alloc(uint a1);
long SearchList_Alloc(int a1);
void NetworkAdapter_FreeList(LPVOID lpMem);
void NetworkAdapter_FreeNode(LPVOID lpMem);
ubyte DnsNameCompare_W(PCNZWCH lpString1, PCNZWCH lpString2);
long NetInfo_GetAdapterByInterfaceIndex(long a1, int a2, int a3);
long FindDnsPolicyConfigInfoPrivate(void* Src, int a2, void* a3);
long GetPrefixHash(wint_t* a1);
long DnsGetApplicationIdentifier(uint** a1, _OWORD* a2, long a3);
void DnsApiAlloc(size_t Size);
long ValidateQueryName(long a1, const(wchar_t)* a2, const(wchar_t)* a3);
long ValidateQueryTld(PCNZWCH lpString2, int a2);
char NetInfo_IsAddrConfig(long a1, short a2);
void McGenControlCallbackV2(long a1, int a2, char a3, long a4, long a5, long a6, long a7);
long TlgRegisterAggregateProviderEx();
long TraceLoggingRegisterEx_EventRegister_EventSetInformation(_QWORD* a1, long a2, long a3);
long* CreateTlgAggregateSession(char a1);
long DnsQueryConfig(void* Dst, long a2, long a3, long a4, int** Dsta, uint* a6);
void DnsFreeAdaptersInfo(uint a1, void** a2);
long NetInfo_SetAddrConfig(long a1, uint a2);
long Idn_IsPunycode(long a1);
long Idn_PunycodeToUnicode(long a1, long a2);
long Idn_UnicodeToPunycode(long a1, long a2);
long Socket_SetMulticastInterface(SOCKET s, long a2, int a3, u_long a4);
long IsCacheableNameError(long a1);
long DnsGetProxyInfoPrivate(PCWSTR AddressString, long a2, long a3, _DWORD* a4);
long DnsPolicyGetAnyRule();
char* Dns_NameAppend_W(void* Dst, long a2, const(wchar_t)* a3, const(wchar_t)* a4);
long AdapterInfo_UpdateNetworkSignature(long a1);
long GetNSIInterfaceRw(long a1, NET_IFINDEX a2, long a3);
long sendUsingServerInfo(long a1, long a2, long a3, _WORD* a4);
bool netinfo_LocalAddrScreen(long a1, long a2);
long InitializeDnsPolicyTable();
void tlgEnableCallback(long a1, int a2, uint a3, long a4, long a5, long a6, long a7);
long WppInitUm();
void EmptyDnsPolicyTable();
void RefreshDirectAccessStatePrivate();
long* FreeDnsPolicyTableEntries(_QWORD **a1);
void TlgUnregisterAggregateProvider();
void DestroyAggregateSession(LPVOID lpMem);
void CancelTimerCallbacksAndDeleteTimer(long a1);
void TlgAggregateInternalRegisteredProviderEtwCallback(const(_GUID)* a1, int a2, long a3, long a4, uint a5, _EVENT_FILTER_DESCRIPTOR* a6, void* a7);
void LookUpTableFlushComplete(long a1);
long Reg_IsMicrosoftDnsServer();
long Query_NetBios(LPVOID lpMem, _DWORD* a2);
long DnsNbt_ResolveName(void* a1, const(wchar_t)* a2, int a3, long a4, uint a5, long a6, long* a7);
void DeRefNbtLookupContext(LPVOID lpMem);
long DnsNbt_CheckAndConvertName(LPCWSTR lpSrcStr, LPSTR lpMultiByteStr, uint a3);
void DnsEtwTraceNetBiosQueryStart(const(wchar_t)* a1, int a2, long a3);
void DnsEtwTraceNetBiosQueryComplete(const(wchar_t)* a1, int a2, const(in6_addr)* a3);
void Trace_LogNetBiosQueryStats(int a1, int a2, int a3);
long _delayLoadHelper2(long a1, long a2);
void DnsTraceServerConfig(long a1, long a2, int a3);
long IpHelp_GetAdaptersAddresses(long a1, ULONG a2, IP_ADAPTER_ADDRESSES_LH** a3);
long IpHelp_GetIpInterfaceScopeId(int a1, _DWORD* a2, _DWORD* a3);
int WxInitializeMemoryManager();
void Reg_FreeGlobalInfo(long a1);
long DnsAddr_IsLinkLocal(uint* a1, int a2);
long McGenEventRegister_EtwEventRegister();
char* Query_AllocateQueryBlob();
void DnsCleanupTcpConnections(int a1);
void NetworkInitializeLocks();
uint* NetInfo_StrikeOutDuplicatesInSearchLists(long a1);
long WppCleanupUm();
long Send_RemoveCancelWait(long a1);
long IsDirectAccessPreferLocal();
long AddRefNetworkQueryBlob(void* a1);
long McGenEventUnregister_EtwEventUnregister();
void TlgAggregateInternalProviderCallback(const(_GUID)* a1, int a2, long a3, long a4);
void NetworkDeleteLocks();
long Tkey_RecordWrite();
long** Dns_RecordListAppend(_QWORD **a1, long a2);
long* Dns_RecordSetDetach(long **a1);
long Dns_NameComparePrivate(const(WCHAR)* a1, const(WCHAR)* a2, int a3);
long Send_AndRecvTcp(long a1);
long Send_OpenTcpConnectionAndSendEx(long a1, _OWORD* a2, int a3);
long SendTcpMessage(PVOID pv, long a2);
long TcpConnectionConnect(PVOID pv, __m128i* a2);
void ProcessTcpBlobStatus(long a1, int a2, int a3, _TP_CALLBACK_INSTANCE* a4);
long Send_AndRecvTcpComplete(long a1);
long Send_SetSendState(long a1, int a2);
long GetTcpConnection(_OWORD* a1, int a2, int a3, void*** a4);
long AllocateDnsTcpConnection(_OWORD* a1, int a2, int a3, long* a4);
void DeRefTcpConnectionWithUseCount(long a1);
void TcpIoCompletionCb(ULONG_PTR NumberOfBytesTransferred, PTP_IO Io, long a3, int a4, uint NumberOfBytesTransferreda);
void DeRefTcpConnection(long a1);
void TcpCallbackCompletion(long a1, uint a2, uint a3);
void TcpCallbackRecvCompletion(long a1, uint a2, int a3);
long Recv_ProcessTcpMessage2(long a1, uint a2, int a3);
void DestroyDnsTcpConnection(long* a1);
void ThreadPool_DeleteIo(PTP_IO pio, int a2);
int CloseTcpConnectionSocket(long a1);
long Send_SetRunState(long a1);
void* Trace_LogRecvEvent(long a1, int a2, int a3);
long Dns_RecvTcpAsync(long a1);
long Socket_ProcessReturnStatus2(long a1, uint a2);
long Recv_TcpComplete(long a1, _DWORD* a2);
int DnsEtwTraceResponseFromDnsServer(long a1, long a2, char a3);
void DnsTraceNameResponse(long a1, long a2);
long Dns_IsSamePacketQuestion(long a1, long a2);
long Send_TcpConnectComplete2(long a1, long a2);
long Send_MessagePrivateEx2(long a1, long a2);
void Trace_LogSendEvent(long a1, int a2);
void DnsEtwTraceSendQueryToDnsServer(long a1, long a2);
void* Send_CreateTcpSendBlob(long a1);
long AddRefDnsMessage(long a1);
long Dns_CloneMsgBuf(long a1);
long Dns_CloneMsgBufContent(long a1, long a2);
long RemoveHeadBlobFromTcpConnection(long a1);
long Send_SetMsgRemoteSockaddr(long a1, _OWORD* a2);
long DnsAddrArray_DeleteAddr(long a1, _WORD* a2);
long SearchList_BuildFromPDN(const(wchar_t)* a1, long a2, long a3);
long Dns_GetDomainSuffixLevel(const(wchar_t)* a1);
long GetEffectiveDevolutionLevel(const(wchar_t)* a1);
long GetDevolutionLevelFromForestName(STRSAFE_PCNZWCH psz); // idb
void NetInfo_FreeNode(LPVOID lpMem);
long IpHelp_IsRouteExists(SOCKADDR_INET* DestinationAddress, NET_IFINDEX a2);
long Dns_IsNetworkSignatureInvalid(_QWORD* a1);
long SetIgnoreAdapterFlagUsingInterfaceIndex(long a1, int a2);
long Query_CancelBroadcast(long a1);
long ThreadPool_QueueWork(PTP_WORK_CALLBACK pfnwk, PVOID pv); // idb
long NetInfo_IsTcpipConfigChange(long a1);
void DnsEtwTraceNetworkQuery(const(wchar_t)* a1, int a2, int a3, long a4);
// void __usercall Reg_ReadUpdateInfo(long a1@<rdx>, const wchar_t *a2@<rcx>, long a3@<r13>);
void Reg_FreeAdapterInfo(long a1);
long NetInfo_IsDnsIgnored(long** a1);
// long __usercall DnsAddr_Build@<rax>(void *Dst@<rcx>, void *Src@<rdx>, int); idb
void Query_MDNSTimerCallback(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
long Ip_IsAddressChanged();
long Query_ClearSendBlob(long a1, int a2);
char Dns_IsStatusRcode(int a1);
long DnsQuery_UTF8(const(WCHAR)* a1, uint a2, uint a3, long a4, long* a5, _QWORD* a6);
long NetInfo_GetAdapterByName(long a1, const(wchar_t)* a2);
long TraceError(const(wchar_t)* a1, int a2);
void Reg_FreeUpdateInfo(LPVOID lpMem, int a2);
long WxGetPersistedRegistryLocation(const(wchar_t)* a1, const(wchar_t)* a2, const(wchar_t)* a3, const(wchar_t)* a4, int a5);
long ReadDnsPolicyTableConfigInfo();
long ReadDnsPolicyConfigInformation(char a1);
long CanonicalizeDnsPolicyTable();
long AllocateSuffixAndPrefixPolicyTable(long a1);
long ResolverGetConfigRpc(int a1, long a2, long a3);
long Query_CancelNode(LPVOID lpMem); // idb
void Query_MDNSCompleteCallback(long a1, long a2, long a3);
void ThreadPool_SubmitWork(long a1);
long AddRefMDNSContext(void* a1);
long DnsPrint_RecordSet(long a1, _QWORD* a2);
long DnsPrint_Record(long a1, long a2, long a3);
long Dns_AddRecordsToMessage(long a1, long a2, int a3);
long Dns_RecordListCopyEx(long a1, long a2, int a3, long a4);
long privateRecordCopy(long a1, long a2, long a3, int a4, int a5);
long Dns_RecordTableIndexForType(uint a1);
long Dns_WriteRecordStructureToPacket(long a1, long a2, int a3);
void coalesceRemoveFromGroup(uint a1, _QWORD* a2, _QWORD* a3);
void coalesceRemoveFromBucket(uint a1, _QWORD* a2);
long DnsQueryConfigDword(int a1, const(wchar_t)* a2);
long LookupDwordConfigValue(BYTE* a1, int a2, long a3);
char* GetConfigToRegistryMapping(int a1, long a2);
long Rpc_ProcessQueryRecords(long* a1);
long FixupNameOwnerPointers(long a1);
long Dns_AllocateMsgBuf(uint a1);
long DnsNbt_Open(int a1, long a2);
long AddRefNbtLookupContext(int* a1);
long DnsNbt_CheckDeviceNameExists(uint* a1, uint a2, long a3);
HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...);
char* Flat_RecordWrite(long a1, char* a2, uint a3);
int Socket_CloseEx(SOCKET s, int a2);
void InProc_ProcessQueryResult(LPVOID lpMem);
long NetInfo_UpdateServerReachability(long a1, long a2, char* a3);
long DnsGetPolicyTableInfoPrivate(void* Src, long a2, long a3, long a4);
long GetPolicyTableInfo(void* Src, char a2, long a3);
long Socket_SetMulticastLoopBack(SOCKET s, int a2, int a3);
long DnsNotifyResolver(int a1, long a2);
long Dns_SendServiceControl(LPCWSTR lpServiceName); // idb
long NetInfo_UpdateNetworkProperties(int a1, int a2, int a3, __m128i* a4, long a5, long* a6, _DWORD* a7);
void Query_MDNSCompleteWork(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
long Socket_SetInterfaceIndexSocketOption(SOCKET s, int a2, int a3, int a4);
long DnsDhcpRegisterAddrs(long a1, long a2);
long DnsDhcpTriggerAdapterRegistration(const(wchar_t)* a1, int a2);
long DnsNotifyResolverEx(long a1, long a2, int a3, long a4);
long DnsResolverOp(long a1, long a2, long a3);
void FlushDnsPolicyUnreachableStatus();
long DnsValidateName_W(const(wchar_t)* a1, int a2);
long Dns_ValidateName_W(const(WCHAR)* a1, int a2, long a3, uint a4);
long Dns_ValidateName_UTF8(const(char)* a1, int a2, uint a3, uint a4);
long Socket_Create(int a1, int a2, long a3, uint a4, DWORD a5);
long HostsFile_Query(long a1, uint a2);
void DnsNbt_IoCompletionCallback(ULONG_PTR NumberOfBytesTransferred, PTP_IO Io, long a3, int a4);
long* ExtraInfo_GetServerListUnknownFormat(long a1);
long ExtraInfo_FindInList(long a1, int a2);
void UnlockShared(AutoSrw* __hidden); // idb
void LockShared(AutoSrw* __hidden); // idb
long A_RecordWrite(long a1, _DWORD* a2, uint a3);
long DelaySortDAServerlist();
void DnsNbt_Close(LPVOID lpMem);
long CompareHashAndString(uint, uint, const(uint)*, const(uint)*); // idb
void Query_NetBiosComplete(LPVOID lpMem, int a2, long a3);
long ARecordPrint(long a1);
long AaaaRecordPrint(long a1);
void AdaptiveTimeout_ResetAdaptiveTimeout();
void Coalesce_UpdateNetVersion();
long Trace_Reset();
long Dns_RecordListUnmapV4MappedAAAAInPlace(long a1);
long WxInitializeConnectionManager(); // idb
long DnsConnectionManagerInitOnce(PINIT_ONCE InitOnce, PVOID Parameter, PVOID* Context);
long DnsConnectionSetPolicyEntriesPrivate(long a1, long a2, int a3);
long DnsConnectionDeletePolicyEntriesPrivate(long a1, long a2);
long DnsConnectionDeletePolicyEntries(int a1);
long DnsConnectionSetPolicyEntries(int a1, long a2);
long HostsFile_ReadLine(long a1);
uint GetCurrentTimeInSeconds();
long GetDnsRecordsFromUnicastAddressTable(const(WCHAR)* a1, short a2, int a3, long a4, uint* a5, long* a6);
long HostsFile_Open(long a1);
HRESULT StringCchCatA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc);
HRESULT StringCopyWorkerA(STRSAFE_LPSTR pszDest, size_t cchDest, size_t* pcchNewDestLength, STRSAFE_PCNZCH pszSrc, size_t cchToCopy);
ubyte Util_IsRunningOnXboxOne();
long hostsFileSniffBom(long a1);
long Dns_CacheServiceInit();
long AdaptiveTimeout_InitializeGlobals();
long Ip_RegisterNotification();
int HostsFile_Close(HANDLE* a1);
long DnsDhcpRegisterInit();
long CRT_INIT(long a1, int a2);
long _DllMainCRTStartup(HINSTANCE hinstDLL, DWORD fdwReason, void* a3);
void __cdecl; __noreturn _report_gsfailure(uintptr_t StackCookie);
long _report_rangecheckfailure();
LPVOID __fastcall; operator new_(SIZE_T a1);
int DnsFlushResolverCacheEntry_W_filt_1(uint** a1);
int DnsGetProxyInformationRpc_filt_1(uint** a1);
int DnsGetAdaptersInfo_filt_1(uint** a1);
int SyncResolverQueryRpc_filt_1(uint** a1, long a2);
int ResolverGetConfigRpc_filt_1(uint** a1);
int DnsConnectionDeletePolicyEntries_filt_1(uint** a1, long a2);
int DnsConnectionSetPolicyEntries_filt_1(uint** a1, long a2);
int DnsResolverOp_filt_1(uint** a1);
int* Config_GetDnsServerListIp4(const(wchar_t)* a1);
_OWORD* Config_GetDwordGlobals();
void DnsFreeConfigStructure(void* Dst, int a2);
long DnsSetConfigDword(int a1, const(wchar_t)* a2, int a3);
long DnsSetConfigValue(int a1, const(wchar_t)* a2, DWORD a3, const(BYTE)* a4, DWORD a5);
long DnsDhcpRegisterHostAddrs(const(wchar_t)* a1, long a2, long a3, long a4, long a5, long a6, const(wchar_t)* a7, long a8, int a9, int a10);
long DnsDhcpRemoveRegistrations();
long DhcpSrv_AddToTimedOutQueue(long a1, long a2, int a3);
long DhcpSrv_AddToTimedOutQueueNoCrit(long a1, long a2, int a3);
void DhcpSrv_DeleteListEntry(long a1, long a2);
long DhcpSrv_Dequeue(long* a1);
long DhcpSrv_DequeueNoCrit(long* a1);
long DhcpSrv_Enqueue(_QWORD* a1);
void DhcpSrv_FreeQueue(LPVOID lpMem);
void DhcpSrv_FreeQueueElement(LPVOID lpMem);
void DhcpSrv_FreeQueueElementWithCallback(LPVOID lpMem, long a2, long a3, uint a4);
long DhcpSrv_InitializeQueues();
void DhcpSrv_PrivateCleanup();
long DhcpSrv_ProcessQDependencies(long a1, long a2);
long DhcpSrv_RegisterHostAddr(_OWORD* a1, const(wchar_t)* a2, int a3, uint a4, long a5, long a6, void* lpMem, int a8, uint Size, void* Src);
long DnsDhcpSrvRegisterHostAddr(long a1);
long DnsDhcpSrvRegisterHostAddrEx(long a1);
long DnsDhcpSrvRegisterHostName(long a1, long a2, int a3, int a4, long a5, long a6, const(void)* a7, int a8);
long DnsDhcpSrvRegisterHostNameEx(uint* a1, long a2, int a3, int a4, long a5, long a6, const(void)* a7, int a8, int a9, long a10, long a11);
long DnsDhcpSrvRegisterInit(STRSAFE_LPCWSTR* a1, uint a2);
long DnsDhcpSrvRegisterInitEx(STRSAFE_LPCWSTR* a1, uint a2, uint a3);
long DnsDhcpSrvRegisterTerm();
long DynDnsAddEntry(long a1, const(WCHAR)* a2, int a3, int a4, int* a5, long a6, long a7, uint a8, __m128i* a9);
long DynDnsAddForward(long a1, const(WCHAR)* a2, int a3, long a4, long a5, uint a6, __m128i* a7);
long DynDnsAddForwardDhcid(long a1, const(WCHAR)* a2, int a3, long a4, long a5, uint a6, __m128i* a7);
long DynDnsDeleteEntry(long a1, const(WCHAR)* a2, int a3, int* a4, long a5, long a6, int a7, __m128i* a8);
long DynDnsDeleteForwardEntryDhcid(long a1, const(WCHAR)* a2, long a3, int a4, int a5, __m128i* a6);
long DynDnsDeleteForwards(long* a1, long a2, long a3, int a4, int a5, __m128i* a6);
DWORD DynDnsRegisterEntries();
long FormResourceRecord(__m128i* a1, long a2, short a3, uint a4, void* Src, int a6, __m128i* Srca);
long GetEarliestRetryTime();
long Dns_CacheServiceCleanup();
void Dns_CacheServiceStopIssued();
long WppControlCallback(long a1, long a2, _DWORD* a3, long a4);
void tlgDefineProvider_annotation__Tlgg_TraceProviderProv();
long DereferenceDnsPolicyConfigNode(void* a1);
void DnsFreePolicyConfig(LPVOID lpMem);
void DnsFreeProxyName(void* a1);
ubyte DnsGetCacheDataTable(_QWORD* a1);
long DnsGetCacheDataTableEx(long a1, _QWORD* a2);
long DnsGetInterfaceSettings(__m128i* a1, long a2);
long DnsGetPolicyTableInfo(void* Src, long a2, long a3, long a4);
long DnsGetPolicyTableInfoRpc(const(wchar_t)* a1, int a2, long a3, long a4, long a5);
long DnsGetSettings(long a1);
long DnsResetQueryRetryTimeouts(__m128i* a1);
long DnsSetInterfaceSettings(__m128i* a1, long a2);
long DnsSetNrptRulesRpc(int a1, long a2, long a3, int a4);
long DnsSetQueryRetryTimeouts(__m128i* a1, uint a2, uint* a3);
long DnsSetSettings(long a1);
void SetKnownNetFailure(DWORD a1);
long* DnsAllocateRecord(ushort a1);
char* DnsCopyStringEx(char* a1, const(WCHAR)* a2, int a3, int a4, int a5);
long DnsDhcpSrvRegisterInitialize(STRSAFE_LPCWSTR* a1);
long DnsGetBufferLengthForStringCopy(const(WCHAR)* a1, long a2, int a3, int a4);
int* DnsGetDnsServerList(_QWORD* a1);
long DnsGetDomainName(uint a1);
long DnsIpv6AddressToString(CHAR* a1, const(in6_addr)* a2);
ubyte DnsIsAMailboxType(short a1);
ubyte DnsIsNSECType(short a1);
long DnsNameCompareEx_A(const(WCHAR)* a1, long a2, long a3);
long DnsNameCompareEx_UTF8(const(WCHAR)* a1, long a2, long a3);
long DnsNameCompareEx_W(const(WCHAR)* a1, long a2, long a3);
void DnsRecordListFree(long a1, int a2);
ubyte DnsRecordSetCompare(long* a1, long* a2, long* a3, long* a4);
long DnsRecordSetCopyEx(long a1, long a2, uint a3);
const(char)* DnsRecordStringForType(uint a1);
long DnsRecordStringForWritableType(uint a1);
long DnsStatusString(int a1);
void* DnsStringCopyAllocateEx(const(WCHAR)* a1, long a2, int a3, int a4);
int DnsUtf8ToUnicode(LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
long DnsValidateName_A(const(WCHAR)* a1, int a2);
long DnsValidateName_UTF8(const(char)* a1, int a2);
int Dns_CloseConnection(SOCKET a1);
int Dns_CloseSocket(SOCKET a1);
long Dns_CreateSocket(int type, uint a2, uint a3);
long Faz_AreServerListsInSameNameSpace(PCNZWCH lpString2, long a2, long a3);
long Faz_CollapseDnsServerListsForUpdate(long* a1, int a2, _QWORD* a3, _DWORD* a4, const(wchar_t)* a5);
long Faz_CompareTwoAdaptersForSameNameSpace(long a1, long a2, long** a3, long a4, long a5, long** a6, int a7);
long Faz_GetDnsServerListsForUpdate(void* Dst, uint a2, short a3);
long Faz_Simple(long a1, int a2, const(wchar_t)* a3, long a4);
long combineDnsServerListsForTwoAdapters(long a1, int a2, uint a3, uint a4);
long eliminateDuplicateAdapterFromArrays(long a1, long a2, long a3, int a4, uint a5);
long readHostIpAddressFromRecordListFAZ(long a1, long a2, const(WCHAR)* a3, int a4, int a5, int a6);
void* BuildHostfileRecords(long a1, long a2, long a3);
HRESULT StringCchCopyA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc);
long hostsFile_ScreenName(PCNZWCH lpString2, long a2, long a3);
long idnHostFileLineDepunify(long a1);
BOOLEAN IN6_IS_ADDR_V4MAPPED(const(IN6_ADDR)* a);
long IpHelp_IsAddrOnLink(SOCKADDR_INET* DestinationAddress); // idb
long IpHelp_IsReachableInterfaceOnSameLink(SOCKADDR_INET* DestinationAddress, NET_IFINDEX InterfaceIndex, NET_IFINDEX InterfaceIndex); // idb
DWORD DnsScreenLocalAddrsForRegistration(void* Dst, long a2, uint a3);
long LocalIp_IsAddrLocalEx(uint* a1, long a2, void* a3);
long LocalIp_IsAddrLocalRegisterable(uint* a1, long a2);
long Local_GetRecordsForLocalName(long a1, uint a2);
long Local_GetRecordsForLocalNameEx(long a1, uint a2, const(wchar_t)* a3, long a4, int a5);
long local_GetLocalPtrRecord(long a1, const(wchar_t)* a2,  a3, char a4);
long local_ScreenLocalAddrNotCluster(long a1);
void** localip_BuildRRListFromArray(long a1, const(wchar_t)* a2, uint a3, long a4);
void DnsApiHeapReset(long function(_QWORD), long a2, long function(_QWORD));
LPvoid DnsApiRealloc(LPVOID lpMem, SIZE_T dwBytes);
long DnsValidateNameOrIp_TempW(const(WCHAR)* a1, int a2);
long Dns_ResetNetworkInfo(long a1);
void Ip_NotifyAddressChange(PVOID CallerContext, PMIB_UNICASTIPADDRESS_ROW Row, MIB_NOTIFICATION_TYPE NotificationType);
long IsDnsReachableOnAlternateInterface(long a1, long a2, NET_IFINDEX a3, long a4);
long* NetInfo_CopyNetworkIndex(_QWORD *a1, int a2);
long* NetInfo_CreateForUpdate(void *Src, void *a2, uint *a3);
long NetInfo_GetAdapterByAddress(long a1, long a2, int a3);
int* NetInfo_GetLocalAddrArrayIp4(const(wchar_t)* a1);
long NetInfo_GetNextAdapter(long a1);
long NetInfo_GetPerNetworkAdapter(long* a1, int a2, void* a3, _QWORD* a4);
long NetInfo_IsUpdateReady(long a1);
long NetInfo_UpdateDnsInterfaceConfigChange(long a1);
void SearchList_DeleteName(long a1, const(wchar_t)* a2);
long SearchList_Parse(long a1, const(wchar_t)* a2);
long netinfo_LocalAddrScreenLinkLocal(uint* a1, uint* a2);
long netinfo_ReadLocalAddrsLinkLocal(long a1, long a2, long a3, long a4);
long DnsAdapterInfo_CopyFromPrivate(LPVOID lpMem, long a2, int a3);
void DnsAdapterInfo_Free(LPVOID lpMem, int a2);
long* DnsAdapterInformation_CreateFromPrivate(long a1);
void XpAdapter_Free(LPVOID lpMem);
long DnsFindAuthoritativeZone(LPCWSTR lpWideCharStr, long a2, long a3, long a4);
void DnsNetworkInfo_Free(LPVOID lpMem);
void DnsNetworkInformation_Free(LPVOID lpMem);
void DnsSearchList_Free(LPVOID lpMem);
long NetInfo_IsForUpdate(long a1);
long* XpAdapter_CreateFromPrivate(long a1);
long* XpNetinfo_CreateFromPrivate(long a1);
void XpNetinfo_Free(LPVOID lpMem);
_QWORD* XpNetinfo_Get();
long* XpSearch_CreateFromPrivate(long a1);
void XpSearch_Free(LPVOID lpMem);
ubyte IS_DNS_SERVER_NOT_REACHABLE(int a1);
long IsCallerAllowedToTriggerVPN(long a1);
long McGenEventWrite_EtwEventWriteTransfer(_QWORD* a1, long a2, long a3, int a4, long a5);
long McTemplateU0z_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3);
long McTemplateU0zqqq_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, char a5, char a6);
long McTemplateU0zqxq_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, char a5, char a6);
long QueryDirectEx(long* a1, long a2, long a3, int a4, long a5, short a6, long a7, long a8, long a9, long a10);
long Query_Cancel(LPVOID lpMem, int a2, int a3);
void Query_MDNSSerialDualWork(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
void Query_MDNSSerialTimerCallback(long a1, long a2);
long Query_MDNSStartSerialDual(long a1, int a2);
void Query_MDNSStopParallelWork(long a1, long a2);
long Query_PolicyTableDnsServer(long a1, long* a2, LPVOID* a3);
long checkForAnyOnLinkRecords(long a1);
long AsyncResolverQueryRPC(long a1, const(wchar_t)* a2, uint a3, int a4, long a5, long a6, long a7, long a8, long a9);
long BreakRecordsIntoBlob(void* Dst, long a2, short a3);
long CombinedQueryEx(LPVOID lpThreadParameter, long dwCreationFlags);
void DeRefRpcAsyncContext(void** a1);
long DnsCancelQuery(long a1);
long DnsQueryExA(LPVOID lpThreadParameter, long a2);
long DnsQueryExUTF8(LPVOID lpThreadParameter, long a2);
long DnsQueryExW(LPVOID lpThreadParameter); // idb
long DnsQuery_A(const(WCHAR)* a1, uint a2, uint a3, long a4, long* a5, _QWORD* a6);
long DnsResolverQueryHvsi(const(wchar_t)* a1, uint a2, int a3, int a4, long a5, CLIENT_CALL_RETURN a6, long a7, LARGE_INTEGER a8);
long GetDnsServerRRSet(_QWORD* a1, uint a2);
long GetLoopbackRecords(const(WCHAR)* a1, short a2, int a3, long* a4);
void Rpc_ProcessQueryResult(long a1);
void Rpc_QueryComplete(_RPC_ASYNC_STATE* a1);
void Rpc_QueryCompleteCallback(_RPC_ASYNC_STATE* a1);
long ShimDnsQueryEx(LPVOID lpThreadParameter);
HRESULT StringCchCatW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc);
long DnsExtractRecordsFromMessage_UTF8(long a1, uint a2, _QWORD* a3);
long DnsExtractRecordsFromMessage_W(long a1, uint a2, _QWORD* a3);
long DnsWriteQuestionToBuffer_UTF8(long a1, _DWORD* a2, WCHAR* a3, u_short a4, u_short a5, char a6);
long DnsWriteQuestionToBuffer_W(long a1, _DWORD* a2, WCHAR* a3, u_short a4, u_short a5, char a6);
long* Dns_AddTailMsgBuf(long a1);
void Dns_DeleteTailMsgBuf(long a1);
long Dns_ExtractRecordsFromBuffer(long a1, uint a2, int a3, _QWORD* a4);
void Dns_FreeMsgBufKeepHead(long a1);
long Dns_GetRandomXid();
long Dns_IsEqualMsgBuf(long a1, long a2);
long Dns_ParsePacketRecord(long a1, long a2, uint** a3);
uint Dns_ReadPacketNameAllocate(const(char)** a1, uint* a2, uint* a3, _DWORD* a4, uint a5, long a6, uint a7);
uint Dns_ReadRecordStructureFromPacket(long a1, uint a2, long a3);
void Dns_SetRecordDatalength(long a1, short a2);
void Dns_SetRecordsSection(long* a1, char a2);
void Dns_SetRecordsTtl(long* a1, int a2);
uint* Dns_SkipToRecord(_WORD* a1, uint a2, int a3);
long Dns_WriteOptToMessage(long a1, long a2, long a3, long a4, uint a5);
long Dns_WriteRecordStructureToMessage(long a1, long a2, u_short a3, u_long a4);
long Dns_WriteRecordStructureToPacketEx(u_short* a1, u_short a2, u_short a3, u_long a4, u_short a5);
long Dns_WriteStringToPacket(_BYTE* a1, uint a2, const(WCHAR)* a3, int a4);
char PrintConfigGlobals();
void Reg_CopyInGlobals(long a1);
long Reg_DefaultAdapterInfo(long a1, long a2, long a3);
long Reg_GetAdapterByName(const(WCHAR)* a1, long a2);
long Reg_SetValuePropertyAndAlertCache(uint a1, uint a2, DWORD a3, const(BYTE)* a4, DWORD cbData);
long Reg_TunnelPhysicalAdapterInfo(long a1, void* a2, long a3, long a4, long a5);
long DnsFlushResolverCache();
long DnsFlushResolverCacheEntry_A(const(char)* a1);
long DnsFlushResolverCacheEntry_UTF8(const(char)* a1);
long FlushResolverCacheEntryNarrow(const(char)* a1, int a2);
void AbortTcpConnection(long a1, int a2);
long Dns_InitializeMsgRemoteSockaddr(long a1, long a2);
long Dns_OpenTcpConnectionAndSend(long a1, long a2);
long Dns_RecvTcp(long a1, long a2);
long Dns_SendAndRecvUdp(long a1, long a2, uint a3, long a4, long a5);
long Dns_SendEx(long a1, long a2, int a3);
ubyte IsTcpConnectionIdle(long a1, uint a2);
long Recv_GetSocket(_QWORD* a1, fd_set* a2);
long Recv_ProcessTcpMessage(long a1, long a2, int a3);
long RemoveBlobByXidFromTcpConnection(long a1, short a2);
long RemoveBlobFromTcpConnection(long a1);
long RemoveBlobFromTcpConnectionLocked(long a1);
void RemoveTcpConnectionFromList(_QWORD* a1);
void Send_DeleteThreadPools(long a1);
long Send_IsServerOptExclude(_WORD* a1);
long Send_MessagePrivate(long a1, long a2, int a3);
long Send_OpenTcpConnectionAndSend(long a1, _OWORD* a2);
long Send_SetMessageForRecv(long a1, long a2);
void Send_SetServerOptExclude(_WORD* a1);
long Send_TcpConnectComplete(long a1, long a2, long a3);
long TcpConnectionCleanupBlobs(long a1, int a2);
void TcpMessageTimerCb(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
void TimeoutDnsServers(long a1, int a2);
long markDuplicateSends(long a1, long a2);
long Socket_ClearMessageSockets(_QWORD* a1);
int Socket_CloseMessageSockets(long a1);
long Socket_TcpListen(SOCKET s); // idb
long ControlCallback(int a1, long a2, long a3, long a4);
long ConvertInterfaceIndexToGuid(NET_IFINDEX a1, GUID* a2, _WORD* a3);
long DNSETW_TRACE_HOST_FILE_ERROR(long a1, long a2, long a3);
long DNSETW_TRACE_POLICY_TABLE(long a1);
long DNSETW_TRACE_SERVER_QUERY_CHANGE(long a1,  a2, long a3);
void DNSETW_TRACE_SERVER_TIMEOUT_ALL(const(wchar_t)* a1, int a2, long a3);
long DNSETW_TRACE_SERVER_VALIDATION(long a1);
void DnsCheckServerConfig(long a1);
long DnsCompareAddrArrays(long a1, long a2);
long DnsCompareAddrArraysPerFamily(long a1, long a2, int a3);
void DnsEtwTraceQueryExComplete(const(wchar_t)* a1, int a2, long a3, char a4, const(in6_addr)* a5);
void DnsGetNonClearAddressFamilies(long a1, int* a2, int* a3);
void DnsLogEvent(long a1, uint a2, long* a3, int a4);
long DnsStatsFindOrAddInterface(int a1, long a2, uint* a3);
void DnsTraceInvalidQuestion(long a1, long a2);
void DnsTraceInvalidServerIp(long a1, long a2);
void DnsTraceInvalidTransactionId(long a1, long a2);
void GetDnsResultsInString(const(in6_addr)* a1, wchar_t* a2);
void GetFilteredIpAddressStringFromDnsAddrArray(long a1, long a2, int a3, wchar_t* a4);
void IN6ADDR_SETSOCKADDR(PSOCKADDR_IN6 a, const(IN6_ADDR)* addr, SCOPE_ID scope_, USHORT port);
SCOPE_LEVEL Ipv6UnicastAddressScope(const(UCHAR)* Address);
long McTemplateU0qbr0_EtwEventWriteTransfer(long a1, long a2, long a3, long a4);
long McTemplateU0qq_EtwEventWriteTransfer(long a1, long a2);
long McTemplateU0qqq_EtwEventWriteTransfer(long a1, long a2, long a3);
long McTemplateU0zqbr1_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, long a5);
long McTemplateU0zqbr1qbr3_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, long a5, int a6, long a7);
long McTemplateU0zqqqqz_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, char a5, int a6, long a7, const(wchar_t)* a8);
long McTemplateU0zqqqzqqqz_EtwEventWriteTransfer(_QWORD* a1, long a2, const(wchar_t)* a3, int a4, int a5, char a6, int a7, char a8, int a9, const(wchar_t)* a10);
long McTemplateU0zqqqzzz_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, long a5, long a6, const(wchar_t)* a7, const(wchar_t)* a8, const(wchar_t)* a9);
long McTemplateU0zqquqbr4_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, int a5, int a6, long a7, long a8);
long McTemplateU0zqqzz_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, char a5, const(wchar_t)* a6, const(wchar_t)* a7);
long McTemplateU0zqxqz_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, long a5, char a6, const(wchar_t)* a7);
long McTemplateU0zqxzqqqq_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, int a5, char a6, int a7, char a8, int a9, char a10);
long McTemplateU0zqz_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, const(wchar_t)* a5);
long McTemplateU0zqzq_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4, const(wchar_t)* a5, char a6);
long McTemplateU0zzqbr2_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, const(wchar_t)* a4, int a5, long a6);
long McTemplateU0zzqqqzqzzq_EtwEventWriteTransfer(_QWORD* a1, long a2, const(wchar_t)* a3, const(wchar_t)* a4, char a5, int a6, long a7, char a8, int a9, const(wchar_t)* a10, const(wchar_t)* a11, char a12);
HRESULT StringCchCatExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR* ppszDestEnd, size_t* pcchRemaining, DWORD dwFlags);
HRESULT StringCopyWorkerW_0(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t* pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
HRESULT StringLengthWorkerW_0(STRSAFE_PCNZWCH psz, size_t cchMax, size_t* pcchLength);
void* Trace_LogQueryEvent(long a1, short a2);
void Trace_LogResponseEvent(long a1, long a2, long a3, uint a4);
long UpdateDnsSeriesStatistics(uint a1, long a2);
void UpdateDnsServerStatistics(long a1, uint* a2, int a3, uint a4);
long UpdateDnsServerStatisticsForFailure(int a1, uint a2, long a3);
long UpdateDnsServerTimeoutStatistics(long a1, uint* a2, uint a3);
void UploadAllDnsStatistics(void* Dst);
void UploadAllDnsStatisticsIfNeeded(int a1, _DWORD* a2);
void UploadFailuresDnsStatistics(long a1, uint a2, int a3, int a4);
void UploadQueryStatistics();
void UploadServerDnsStatistics(long a1, uint a2, long a3);
void tlgCreate1Sz_wchar_t(long a1, _WORD* a2);
long tlgWriteTransfer_EtwEventWriteTransfer(long a1, uint* a2, long a3, long a4, int a5, long a6);
long DnsAcquireContextHandle_A(int a1, long a2, _QWORD* a3);
long DnsAcquireContextHandle_W(int a1, long a2, _QWORD* a3);
long DnsModifyRecordsInSet_A(long a1, long a2, int a3, long a4, long a5, long a6);
long DnsModifyRecordsInSet_UTF8(long a1, long a2, int a3, long a4, long a5, long a6);
long DnsModifyRecordsInSet_W(long a1, long a2, int a3, long a4, long a5, long a6);
void DnsReleaseContextHandle(LPVOID lpMem);
long DnsReplaceRecordSetA(long a1, long a2, long a3, long a4, long a5);
long DnsReplaceRecordSetUTF8(long a1, long a2, long a3, long a4, long a5);
long DnsReplaceRecordSetW(long a1, long a2, long a3, long a4, long a5);
long DnsUpdateTest_A(long a1, const(char)* a2, int a3, long a4);
long DnsUpdateTest_UTF8(long a1, const(char)* a2, int a3, long a4);
long DnsUpdateTest_W(long a1, const(wchar_t)* a2, int a3, long a4);
long Update_FazSendFlush(long a1);
long Update_MultiMaster(long a1);
long Update_Private(long a1);
long Update_ReplaceAddressRecordsW(long a1, int a2, long a3, long a4);
long Update_SaveResults(long a1, int a2, short a3, _OWORD* a4);
long Update_Send(long a1);
long modifyRecordsInSetPrivate(long a1, long a2, long a3, int a4, long a5, int a6, long a7, long a8, int a9);
long replaceRecordSetPrivate(long a1, long a2, long a3, long a4, long a5, int a6);
long* up_BuildUpdateRecordSet(long *a1, long *a2, long *a3);
long up_PrepareRecordList(long* a1, int a2, int a3, int a4, uint a5);
long up_ReplaceAddressRecordsPrivate(long a1, int a2, long a3, long a4);
void* ExtraInfo_Init(_DWORD* a1, int a2);
long ExtraInfo_SetBasicResults(long a1);
long StartDnsServiceOnDemand();
int Util_GetActiveProtocols(_DWORD* a1, _DWORD* a2);
ubyte Util_IsIp6Running();
long isServiceDisabled(SC_HANDLE hService); // idb
long DnsValidateServerArray_A(long a1, const(WCHAR)* a2, int a3);
long DnsValidateServerArray_W(long a1, const(WCHAR)* a2, int a3);
long DnsValidateServerStatus(void* Src, const(WCHAR)* a2, _DWORD* a3);
long DnsValidateServer_A(_OWORD* a1, const(WCHAR)* a2, int a3);
long DnsValidateServer_W(_OWORD* a1, const(WCHAR)* a2, int a3);
long AddDnsRulePolicyConfig(long a1, long a2, long a3, int a4, int a5);
long BuildServerArrayAndList(wchar_t* Str, _QWORD* a2, LPVOID* a3);
char CompareDAPolicy(long a1, long a2);
char CompareDnsPolicy(long* a1, long a2);
char CompareDnsSecPolicy(long a1, _DWORD* a2);
char CompareGenericPolicy(long a1, long a2);
char CompareIdnPolicy(long a1, long a2);
long CreateDAPolicyObject(long a1, _QWORD* a2);
long CreateDnsSecPolicyObject(_DWORD* a1, void*** a2);
long CreateGenericPolicyObject(long a1, _QWORD* a2);
long CreateIdnPolicyObject(long a1, void*** a2);
long DereferenceDAPolicyConfigNode(void** a1);
long DereferenceDnsSecPolicyConfigNode(void** a1);
long DereferenceIdnPolicyConfigNode(void** a1);
long DereferenceGenericPolicyConfigNode(void** a1);
long DnsCheckNrptRuleIntegrity(long a1);
long DnsCheckNrptRules(long a1, long a2, int a3);
long DnsDisableIdnEncoding(int a1, const(wchar_t)* a2);
void DnsFreeNrptRule(long a1);
void DnsFreeNrptRuleNamesList(LPVOID* a1, uint a2);
long DnsGetNrptRuleNamesList(_QWORD* a1, DWORD* a2);
long DnsRemoveNrptRule(LPCWSTR lpSubKey); // idb
long DnsSetNrptRule(long a1, int a2, long a3);
long DnsSetNrptRules(uint a1, _QWORD* a2, long a3, int a4);
void FreeDAPolicyConfigNode(LPVOID lpMem);
void FreeDnsPolicyConfigNode(LPVOID lpMem);
void FreeDnsSecPolicyConfigNode(LPVOID lpMem);
void FreeFQDNServerList(LPVOID lpMem);
void FreeGenericPolicyConfigNode(LPVOID lpMem);
long GetDnsRulePolicyConfig(HKEY hKey); // idb
long GetDnsRulePolicyObjects(long a1, void*** a2, void*** a3, void*** a4, void*** a5);
long GetNumServers(wchar_t* Str); // idb
long McTemplateU0zq_EtwEventWriteTransfer(long a1, long a2, const(wchar_t)* a3, int a4);
long ReadDaMultisiteKey();
long ReadDnsNrptRuleFromRegistry(HKEY hKey, void* Dst); // idb
long SortDnsAddrArray(long a1);
HRESULT StringCchCopyNW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
long TraceNrptRule(long a1, const(char)* a2);
long WriteDnsNrptRuleToRegistry(LPCWSTR lpSubKey, _QWORD* a2, int a3);
long WriteDnsNrptRulesToRegistry(uint a1, LPCWSTR* a2, long a3, int a4);
long AddEntryToDnsPolicyTable(long a1, long a2, RTL_SRWLOCK* a3, int a4, int a5);
long ClonePolicyConfigInfoBase(_QWORD* a1, long a2);
long CreateDnsPolicyConfigFromConfigNode(_QWORD* a1, uint a2, char a3, _QWORD* a4);
long DnsPolicyGetProxyName(long a1);
long DnsPolicyGetProxyType(long a1);
uint FindEntryFromDnsPrefixPolicyTable(wchar_t* Str2, long a2, uint a3);
uint FindEntryFromDnsSuffixPolicyTable(wchar_t* Str2, long a2, uint a3);
_WORD* GetCanonicalizeSuffixMatchQueryString(void *Src);
long GetDnsPolicyStatusObject(long a1, _QWORD* a2);
long GetEffectiveIPSecPolicyKeys(int a1, long a2, void* a3, _DWORD* a4);
long GetNextLevelSuffix(uint a1);
long GetSuffixHashIndex(wint_t* a1);
void GetSuffixLevel(short* a1, int* a2);
char IS_DIRECT_ACCESS_ACTIVE(uint a1, long a2);
bool InheritDnsPolicyObject(long a1, long a2);
long InheritParentPolicy(long a1, long a2);
long IsDnsPolicyUnreachableStatusSet(long a1);
bool IsSKUDirectAccessEnabled();
long MatchDnsAnyPolicy(const(wchar_t)* a1, int a2, void*** a3);
long MatchDnsFQDNPolicy(wchar_t* Str2, long a2, uint* a3);
long MatchDnsPrefixPolicyTable(wchar_t* Str2, long a2, uint* a3);
long MatchDnsSuffixPolicyTable(wchar_t* a1, long a2, uint* a3);
long MergeIntoExistingPolicy(long* a1, long a2, _QWORD* a3, int a4);
long QueryDirectAccessServerReachable(LPVOID lpThreadParameter);
void ReSortDAServerList();
void SetDnsPolicyUnreachableStatus(long a1, int a2, char a3);
long idnNrptDepunify(LPVOID* a1);
long AddQMIPSECPolicy(int a1, __m128i* a2, const(wchar_t)* a3);
long AddSecureSocketOptions(long a1, __m128i* a2);
long BuildQmProposals(int a1, long a2, long a3, long a4, _QWORD* a5);
long CertFreeCertificateContextPrivate();
long CertStrToNamePrivate(long a1, long a2);
long CreateIPSECPolicy(int a1, __m128i* a2, const(wchar_t)* a3);
long CryptDecodeObjectPrivate();
void DeleteIPSECPolicy(__m128i* a1);
long DoEKUCheck(long a1, __m128i* a2, long a3, _DWORD* a4);
void FreeCertConfig(LPVOID lpMem, uint a2);
long GetCertConfig(_QWORD* a1, uint* a2, const(wchar_t)* a3);
long GetNumCaRestrictions(wchar_t* Str, _DWORD* a2);
long GetSubjectBlobFromName(long a1, uint* a2);
long LoadIPSecDlls();
long MatchCertificateEKU(long a1);
long OpenIPSECHandle();
void DnsNbt_Cancel(LPVOID lpMem);
long DnsNbt_CreateForwardRecords(const(WCHAR)* a1, long a2, _QWORD* a3, long a4);
long DnsNbt_CreateReverseRecords(uint a1, long a2, long* a3);
long DnsNbt_ResolveAddr(void** a1, u_long a2, int a3, long a4, long a5, long* a6);
void Coalesce_Cancel(long a1, long a2);
void AdaptiveTimeout_DereferenceTimeoutList(void** a1);
void** AdaptiveTimeout_ReferenceTimeoutList(void** a1);
long DnsApiSetDebugGlobals(long a1);
void DnsGetLastFailedUpdateInfo(_OWORD* a1);
long DnsUpdate();
long Dns_CreateMulticastSocket();
long Socket_InitWinsock();
long Dns_PingAdapterServers();
long Socket_CreateMulticast();
